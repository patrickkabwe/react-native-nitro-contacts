///
/// HybridNitroContactsSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroContactsSpec.hpp"

// Forward declaration of `HybridNitroContactsSpec_cxx` to properly resolve imports.
namespace NitroContacts { class HybridNitroContactsSpec_cxx; }

// Forward declaration of `NitroContact` to properly resolve imports.
namespace margelo::nitro::nitrocontacts { struct NitroContact; }
// Forward declaration of `NitroAuthorizationStatus` to properly resolve imports.
namespace margelo::nitro::nitrocontacts { enum class NitroAuthorizationStatus; }

#include <NitroModules/Promise.hpp>
#include <vector>
#include "NitroContact.hpp"
#include <string>
#include <optional>
#include "NitroAuthorizationStatus.hpp"

#include "NitroContacts-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrocontacts {

  /**
   * The C++ part of HybridNitroContactsSpec_cxx.swift.
   *
   * HybridNitroContactsSpecSwift (C++) accesses HybridNitroContactsSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroContactsSpec_cxx can directly inherit from the C++ class HybridNitroContactsSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroContactsSpecSwift: public virtual HybridNitroContactsSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroContactsSpecSwift(const NitroContacts::HybridNitroContactsSpec_cxx& swiftPart):
      HybridObject(HybridNitroContactsSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroContacts::HybridNitroContactsSpec_cxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<std::vector<NitroContact>>> getContacts() override {
      auto __result = _swiftPart.getContacts();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::optional<NitroContact>>> getContact(const std::string& id) override {
      auto __result = _swiftPart.getContact(id);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<bool>> requestPermission() override {
      auto __result = _swiftPart.requestPermission();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<NitroAuthorizationStatus>> authorizationStatus() override {
      auto __result = _swiftPart.authorizationStatus();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroContacts::HybridNitroContactsSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitrocontacts
