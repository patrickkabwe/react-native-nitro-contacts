///
/// HybridNitroContactsSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridNitroContactsSpec``
public protocol HybridNitroContactsSpec_protocol: AnyObject {
  // Properties
  

  // Methods
  func getContacts() throws -> Promise<[NitroContact]>
  func getContact(id: String) throws -> Promise<NitroContact?>
  func requestPermission() throws -> Promise<Bool>
  func authorizationStatus() throws -> Promise<NitroAuthorizationStatus>
}

/// See ``HybridNitroContactsSpec``
public class HybridNitroContactsSpec_base: HybridObjectSpec {
  private weak var cxxWrapper: HybridNitroContactsSpec_cxx? = nil
  public func getCxxWrapper() -> HybridNitroContactsSpec_cxx {
  #if DEBUG
    guard self is HybridNitroContactsSpec else {
      fatalError("`self` is not a `HybridNitroContactsSpec`! Did you accidentally inherit from `HybridNitroContactsSpec_base` instead of `HybridNitroContactsSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNitroContactsSpec_cxx(self as! HybridNitroContactsSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
  public var memorySize: Int { return 0 }
}

/**
 * A Swift base-protocol representing the NitroContacts HybridObject.
 * Implement this protocol to create Swift-based instances of NitroContacts.
 * ```swift
 * class HybridNitroContacts : HybridNitroContactsSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNitroContactsSpec = HybridNitroContactsSpec_protocol & HybridNitroContactsSpec_base
