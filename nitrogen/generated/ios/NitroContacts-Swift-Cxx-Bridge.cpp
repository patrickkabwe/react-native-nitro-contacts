///
/// NitroContacts-Swift-Cxx-Bridge.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "NitroContacts-Swift-Cxx-Bridge.hpp"

// Include C++ implementation defined types
#include "HybridNitroContactsSpecSwift.hpp"
#include "NitroContacts-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrocontacts::bridge::swift {

  // pragma MARK: std::function<void(const std::vector<NitroContact>& /* result */)>
  Func_void_std__vector_NitroContact_ create_Func_void_std__vector_NitroContact_(void* _Nonnull swiftClosureWrapper) {
    auto swiftClosure = NitroContacts::Func_void_std__vector_NitroContact_::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::vector<NitroContact>& result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull swiftClosureWrapper) {
    auto swiftClosure = NitroContacts::Func_void_std__exception_ptr::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::exception_ptr& error) mutable -> void {
      swiftClosure.call(error);
    };
  }
  
  // pragma MARK: std::function<void(const std::optional<NitroContact>& /* result */)>
  Func_void_std__optional_NitroContact_ create_Func_void_std__optional_NitroContact_(void* _Nonnull swiftClosureWrapper) {
    auto swiftClosure = NitroContacts::Func_void_std__optional_NitroContact_::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::optional<NitroContact>& result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::function<void(bool /* result */)>
  Func_void_bool create_Func_void_bool(void* _Nonnull swiftClosureWrapper) {
    auto swiftClosure = NitroContacts::Func_void_bool::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](bool result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::function<void(NitroAuthorizationStatus /* result */)>
  Func_void_NitroAuthorizationStatus create_Func_void_NitroAuthorizationStatus(void* _Nonnull swiftClosureWrapper) {
    auto swiftClosure = NitroContacts::Func_void_NitroAuthorizationStatus::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](NitroAuthorizationStatus result) mutable -> void {
      swiftClosure.call(static_cast<int>(result));
    };
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::nitrocontacts::HybridNitroContactsSpec>
  std::shared_ptr<margelo::nitro::nitrocontacts::HybridNitroContactsSpec> create_std__shared_ptr_margelo__nitro__nitrocontacts__HybridNitroContactsSpec_(void* _Nonnull swiftUnsafePointer) {
    NitroContacts::HybridNitroContactsSpec_cxx swiftPart = NitroContacts::HybridNitroContactsSpec_cxx::fromUnsafe(swiftUnsafePointer);
    return std::make_shared<margelo::nitro::nitrocontacts::HybridNitroContactsSpecSwift>(swiftPart);
  }
  void* _Nonnull get_std__shared_ptr_margelo__nitro__nitrocontacts__HybridNitroContactsSpec_(std__shared_ptr_margelo__nitro__nitrocontacts__HybridNitroContactsSpec_ cppType) {
    std::shared_ptr<margelo::nitro::nitrocontacts::HybridNitroContactsSpecSwift> swiftWrapper = std::dynamic_pointer_cast<margelo::nitro::nitrocontacts::HybridNitroContactsSpecSwift>(cppType);
  #ifdef NITRO_DEBUG
    if (swiftWrapper == nullptr) [[unlikely]] {
      throw std::runtime_error("Class \"HybridNitroContactsSpec\" is not implemented in Swift!");
    }
  #endif
    NitroContacts::HybridNitroContactsSpec_cxx swiftPart = swiftWrapper->getSwiftPart();
    return swiftPart.toUnsafe();
  }

} // namespace margelo::nitro::nitrocontacts::bridge::swift
