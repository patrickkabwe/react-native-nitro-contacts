///
/// JNitroAuthorizationStatus.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "NitroAuthorizationStatus.hpp"

namespace margelo::nitro::nitrocontacts {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "NitroAuthorizationStatus" and the the Kotlin enum "NitroAuthorizationStatus".
   */
  struct JNitroAuthorizationStatus final: public jni::JavaClass<JNitroAuthorizationStatus> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrocontacts/NitroAuthorizationStatus;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum NitroAuthorizationStatus.
     */
    [[maybe_unused]]
    [[nodiscard]]
    NitroAuthorizationStatus toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("_ordinal");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<NitroAuthorizationStatus>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JNitroAuthorizationStatus> fromCpp(NitroAuthorizationStatus value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldAUTHORIZED = clazz->getStaticField<JNitroAuthorizationStatus>("AUTHORIZED");
      static const auto fieldDENIED = clazz->getStaticField<JNitroAuthorizationStatus>("DENIED");
      static const auto fieldRESTRICTED = clazz->getStaticField<JNitroAuthorizationStatus>("RESTRICTED");
      static const auto fieldNOTDETERMINED = clazz->getStaticField<JNitroAuthorizationStatus>("NOTDETERMINED");
      static const auto fieldLIMITED = clazz->getStaticField<JNitroAuthorizationStatus>("LIMITED");
      
      switch (value) {
        case NitroAuthorizationStatus::AUTHORIZED:
          return clazz->getStaticFieldValue(fieldAUTHORIZED);
        case NitroAuthorizationStatus::DENIED:
          return clazz->getStaticFieldValue(fieldDENIED);
        case NitroAuthorizationStatus::RESTRICTED:
          return clazz->getStaticFieldValue(fieldRESTRICTED);
        case NitroAuthorizationStatus::NOTDETERMINED:
          return clazz->getStaticFieldValue(fieldNOTDETERMINED);
        case NitroAuthorizationStatus::LIMITED:
          return clazz->getStaticFieldValue(fieldLIMITED);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::nitrocontacts
